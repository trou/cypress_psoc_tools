#!/usr/bin/env ruby

require "pp"
require_relative "registers"

vectors = [
    ["init1" , "110010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110111101110000000011111011110110000000001111001111100000111010111100111110010000001111111011110101000000001111101111010000000011111100111110111000000011111011111001001100001111101111101001000000111110111100000000100111111011111000000000001111101111111100010010111"],
    ["init2" , "1101111011100000000111110111101100000000011110011111000001110101111001111100100000011111110111101010000000011111011110100000000111111001111101110000000111110111110010011000011111011111010010000001111001111101000000001111110111100000000011011111011111000000000001111101111111100010010111"],
    ["init3-3v
    ["init3-5v
    ["id-setup" , "110111101110001000011111011100000000000101111101111011100000000111110111101100000000011110011111000001110101111001111100100000011111110111101010000000011111011110100000000111111001111101110000000111110111110010011000011111011111010010000001111001111101000000000111110111100000000011011111011111000000000001111101111111100010010111"],
    ["bulk-erase" , "10011111100000101011111001111111001010110111110111101110000000011111011110110000000001111001111100000111010111100111110010000001111111011110101000000001111101111010000000011111100111110111000000011111011111001001100001111101111101001000000111110111100000000010111111011111000000000001111101111111100010010111"],
    ["verify-setup" , "110111101110000000011111011110110000000001111001111100000111010111100111110010000001111111011110101000000001111101111010000000011111100111110111000000011111011111001001100001111101111101001000000111110111100000000000111111011111000000000001111101111111100010010111"],
    ["program-block" , "10011111100010101001111001111111001010110111110111101110000000011111011110110000000001111001111100000111010111100111110010000001111111011110101000000001111101111010000000011111100111110111000000011111011111001001100001111101111101001000000111110111100000000001011111011111000000000001111101111111100010010111"],
    ["secure" , "10011111100010101001111001111111001010110111110111101110000000011111011110110000000001111001111100000111010111100111110010000001111111011110101000000001111101111010000000011111100111110111000000011111011111001001100001111101111101001000000111110111100000000010011111011111000000000001111101111111100010010111"],
    ["set-block-num" , "1001111101011111111111"],
    # 101   10aaaaaa Z DDDDDDDD Z 1
    # rdmem [0x80-0xBF]
    ["read-byte",      "1011011111100000000001"],
    ["checksum-setup", "1101111011100000000111110111101100000000011110011111000001110101111001111100100000011111110111101010000000011111011110100000000111111001111101110000000111110111110010011000011111011111010010000001111001111101000000000111110111100000000011111111011111000000000001111101111111100010010111"],
    ['read-security-setup', '1101111011100010000111110110000010001000011111011000010000100001111101111011100000000111'],
    ['read-security-1', '11011110111000100001111101110010100001110111110111001010000000011111011100101000000001111101110010100000000111'],
    ['read-security-2', '110111101110000000011111011110100000000111111101111010100000000111110111101100000000011111011111000010111011111101111100111100101111110111110100011000011111011110111000100001111101111111100010010111'],
    ['read-security-3', '11011110111000000001111101111010000000011111110111101010000000011111011110110000000001111101111100001010011111110111110011000000011111011111010001100001111101111111100010010111'],
    ['read-sec-HSSP', '110111101110000000011111011110110000000001111001111100000111010111100111110010000001111110011111101000000001111001111111100000000111110111101010000000011111011110100000000111111001111101110000000111110111110010011000011111011111010010000001111101111000000010000111110111110000000000011111011111111000100101110000'],
    ]
    

#FLS_PR1 1,FAh Register

MEM_NAMES = {0xF8 => "KEY1", 0xF9 => "KEY2", 0xFA => "BLOCKID", 0xFB => "POINTER",
             0xFC => "CLOCK", 0xFE => "DELAY"}

OPC = {"100" => "wrmem", "101" => "rdmem", "110" => "wrreg", "111" => "rdreg"}

$regtable = REGS_USER

def vect2str(v)
    if v == "0"*22 then
        return "nop"
    end
    m = v.match(/(?<opc>.{3})(?<arg1>.{8})(?<arg2>.{8})(11|00)1/)
    b1, b2, b3 = "#{v}00".scan(/......../).map {|p| p.to_i(2)}
    begin
        
        opc = OPC[m[:opc]]
        arg1_v = m[:arg1].to_i(2)
        arg2_v = m[:arg2].to_i(2)
        arg1 = "0x%02X" % arg1_v
        arg2 = "0x%02X" % arg2_v
        case opc
            when "wrreg" then
                if m[:arg1] =~ /[01]+/ then
                    arg1 = "%s (%x)" % [$regtable[arg1_v], arg1_v]
                end
            when "wrmem" then
                arg1 = MEM_NAMES[arg1_v] if MEM_NAMES.has_key?(arg1_v)
        end
        return "[%02X %02X %02X] %s %s, %s" % [b1, b2, b3, opc, arg1, arg2]
    rescue NoMethodError
        return v
    end
end

vectors.each do |name,vect|
    puts "--== #{name} ==--"
    vect.scan(/[01]{22}/).each do |v| 
        insn = vect2str(v)
        case v
          when "1101111011100010000111" then
            $regtable = REGS_SUP
          when "1101111011100000000111" then
            $regtable = REGS_USER
        end
        puts insn# + " (#{v})"
    end
    puts "\n"
end
